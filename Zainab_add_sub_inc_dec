#add <reg>,<reg>
#add <reg>,<mem>
#add <mem>,<reg>
#add <reg>,imm
#add <mem>,imm

#sub <reg>,<reg>
#sub <reg>,<mem>
#sub <mem>,<reg>
#sub <reg>,imm
#sub <mem>,imm

#inc <mem>
#inc <reg>

#dec <mem>
#dec <reg>


#registers
reg8 = ['ah', 'bh', 'ch', 'dh', 'al', 'bl', 'cl', 'dl'] 
reg16 =['ax', 'bx', 'cx', 'dx' ]
reg32 = [ 'eax', 'ebx', 'ecx', 'edx']

#instructions
instructions = ['add', 'sub' , 'inc', 'dec']

#takes instruction and decomposes into instruction and operand in case of 1 operand
enter = input("enter instruction: ")
x = enter.split(' ')
instr = x[0]
y = x[1]
op1 = y
op1 = str(op1)

#machine code
global mcode
mcode = ''
opcode = ''
global d
d = ''
global a
a = ''
global name
name = ''
global memboi
memboi = ''
global code
code = ''
print("your instruction is: ", instr)

def regcode(a):
    global d
    if  a=="ax" or a=="al" or a=="eax":
        d = name + "000"
    elif  a=="bx" or a=="bl" or a=="ebx":
        d = name + "011"
    elif   a=="cx" or a=="cl" or a=="ecx":
        d = name +  "001"
    elif  a=="dx" or a=="dl" or a=="edx":
        d = name +  "010"
    elif a=="ah" or a=="sp":
        d = name +  "100"
    elif a=="bh" or a=="di":
        d = name + "111"
    elif a=="ch" or a=="bp":
        d = name + "101"
    elif a=="dh" or a=="si":
        d = name + "110"
    return d
def constyadd(op1,op2):
        global codeimm
        global code
        codeimm = code + '0010'
        codeimm = codeimm + '0'
        global regist
        regist = regcode(op1)
        if op1 in reg8 :
            codeimm = codeimm + '0'
        else :
            codeimm = codeimm +'1'
        codeimm = codeimm + ' 11'
        z = bin(int(op2[:-1]))
        y = str(z)
        y = y[2:]
        print("mach code is \n",codeimm ,'', regist, '' ,y)
        if (op1 in reg8) and (op2[-1] == 'h'): 
            if len(op2)>3:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            
        elif (op1 in reg8) and (op2[-1] == 'b'):
            if len(op2)>9:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg8) and (op2[-1] != ']'):
            if len(op2) > 2**8:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg16) and (op2[-1] == 'h'): 
            if len(op2)>5:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg16) and (op2[-1] == 'b'):
            if len(op2)>17:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg16) and (op2[-1] != ']'):
            if len(op2) > 2**16:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg32) and (op2[-1] == 'h'): 
            if len(op2)>9:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg32) and (op2[-1] == 'b'):
            if len(op2)>33:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg32) and (op2[-1] != ']'):
            if len(op2) > 2**32:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        else:
            print("invalid")

def constymemsub(op1,op2):
        global codeimm
        global code
        codeimm = code + '0011'
        codeimm = codeimm + '00'
        z = bin(int(op2[:-1]))
        y = str(z)
        y = y[2:]

        if '+' in op1:
            mem_location=op1[1:-1]
            disp =mem_location.split("+")
            mem_reg = disp[0]
            displacement = disp[1]
            dip = int(displacement)
            displacementbin = bin(dip)
            displacementbin = str(displacementbin)
            displacementbin = displacementbin[2:]
            print("there is a displacement in the memory address of ",dip)
            if (dip <=8):
                mod = '01'
            else:
                mod = '10'
            rm = mem_reg
        else:
            mod = '00'
            rm=op1[1:-1]
        memboi = regcode(rm)
        print(f"machine code is {codeimm} {mod} {memboi} {y} {displacementbin} {y}")
        print(f"sub {op2} from contents of {rm} and store the result in {op1}")

def constymemadd(op1,op2):
        global codeimm
        global code
        codeimm = code + '0010'
        codeimm = codeimm + '00'
        z = bin(int(op2[:-1]))
        y = str(z)
        y = y[2:]

        if '+' in op1:
            mem_location=op1[1:-1]
            disp =mem_location.split("+")
            mem_reg = disp[0]
            displacement = disp[1]
            dip = int(displacement)
            displacementbin = bin(dip)
            displacementbin = str(displacementbin)
            displacementbin = displacementbin[2:]
            print("there is a displacement in the memory address of ",dip)
            if (dip <=8):
                mod = '01'
            else:
                mod = '10'
            rm = mem_reg
        else:
            mod = '00'
            rm=op1[1:-1]
        memboi = regcode(rm)
        print(f"machine code is {codeimm} {mod} {memboi} {y} {displacementbin} {y}")
        print(f"Add {op2} to contents of {rm} and store the result in {op1}")

        

def constysub(op1,op2):
        global codeimm
        global code
        codeimm = code + '0011'
        codeimm = codeimm + '0'
        global regist
        regist = regcode(op1)
        if op1 in reg8 :
            codeimm = codeimm + '0'
        else :
            codeimm = codeimm +'1'
        codeimm = codeimm + ' 11'
        z = bin(int(op2[:-1]))
        y = str(z)
        y = y[2:]
        print("mach code is \n",codeimm ,'', regist, '' ,y)
        if (op1 in reg8) and (op2[-1] == 'h'): 
            if len(op2)>3:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            
            # mcode = mcode + reg1 + y
            # print(mcode)
        elif (op1 in reg8) and (op2[-1] == 'b'):
            if len(op2)>9:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg8) and (op2[-1] != ']'):
            if len(op2) > 2**8:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg16) and (op2[-1] == 'h'): 
            if len(op2)>5:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg16) and (op2[-1] == 'b'):
            if len(op2)>17:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg16) and (op2[-1] != ']'):
            if len(op2) > 2**16:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg32) and (op2[-1] == 'h'): 
            if len(op2)>9:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg32) and (op2[-1] == 'b'):
            if len(op2)>33:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        elif (op1 in reg32) and (op2[-1] != ']'):
            if len(op2) > 2**32:
                print("size of const not valid")
            else:
                print(f"add {op2} to {op1} and store the result in {op1}")
            #
        else:
            print("invalid")

def prinmcode(mcode,memboi,reg): #print <mem>,<reg>
    print("machine code for this instruction is")
    print(f"{mcode} {memboi} {reg}")
def printregreg(mcode, reg1, reg2): #print <reg>,<reg>
    print("machine code for this instruction is")
    print(f"{mcode} {reg1} {reg2}")
def printmemreg(mcode,reg,memboi): #print <reg>, <mem>
    print("machine code for this instruction is")
    print(f"{mcode} {reg} {memboi}")
#add instruction
def add(op1,op2):
    #opcode for add
    global mcode
    mcode = opcode + '000010'
    global memboi
    #if destination memory location
    if (op1[0] == '[' and op1[-1] == ']'):
        #reg to r/m -> 0
        mcode = mcode + '0'
        if '+' in op1:
            mem_location=op1[1:-1]
            disp =mem_location.split("+")
            mem_reg = disp[0]
            displacement = disp[1]
            dip = int(displacement)
            print("there is a displacement in the memory address of ",dip)
            if (dip <=8):
                mod = ' 01'
            else:
                mod = ' 10'
            rm = mem_reg
        else:
            mod = ' 00'
            rm=op1[1:-1]
        if (rm in reg8) or (rm in reg16) or (rm in reg32):
            memboi = regcode(rm)
        else:
            rm = rm[:-1]
            memboi = bin(int(rm))
            memboi = str(memboi)
            memboi = memboi[2:]
        print("destination is memory location: " , rm)
        if (op2[0] == '[' and op2[-1] == ']'): #error case <mem>,<mem> not possible
            print("Both operands can not be memory locations")
            memboi = regcode(rm)
        elif (op2 in reg8) or (op2 in reg16) or (op2 in reg32): #source register
            print("source is register: ", op2)
            print(f"Add contents of memory {op1} and {op2} and store result in {op1}")
            global reg
            reg = regcode(op2)
            if op2 in reg8: 
                mcode = mcode + '0'
            else:
                mcode = mcode + '1'
            mcode = mcode + mod
            prinmcode(mcode,memboi,reg)
        elif (op2[-1] == 'h') or (op2[-1] == 'd') or (op2[-1] == 'b'): #operand 2 is constant
            constymemadd(op1,op2)
            
        else:
             print("invalid")
        

    #if destination is register
    elif (op1 in reg16) or (op1 in reg32) or (op1 in reg8): 
        global reggieboi2
        #r/m to reg -> 1
        mcode = mcode + '1'
        print("destination is register: ", op1)
        reg1 = regcode(op1)
        if op1 in reg8: 
            mcode = mcode + '0'
        else:
            mcode = mcode + '1'
        if (op2 in reg8) or (op2 in reg16) or (op2 in reg32): #source is register
            #r/m is reg -> 11
            mcode = mcode + ' 11'
            reg2 = regcode(op2)
            
            if ((op1 in reg8) and (op2 in reg8)): #both 8 bit
                print("source is register: ", op2)
                print(f"Add {op1} of size 8 bits and {op2} of size 8 bits and store result in {op1}") 
            elif ((op1 in reg16) and (op2 in reg16)): #both 16 bit
                print("source is register: ", op2)
                print(f"Add {op1} of size 16 bits and {op2} of size 16 bits and store result in {op1}")
            elif ((op1 in reg32) and (op2 in reg32)): #both 32 bit
                print("source is register: ", op2) 
                print(f"Add {op1} of size 32 bits and {op2} of size 32 bits and store result in {op1}")
            else: 
                print(f"register sizes dont match. cant add {op1} and {op2}")
            printregreg(mcode,reg1,reg2)
        elif (op2[0] == '[' and op2[-1] == ']'): #source is memory location
            #r/m is mem and check for disp
            if '+' in op2:
                mem_location=op2[1:-1]
                disp =mem_location.split("+")
                mem_reg = disp[0]
                displacement = disp[1]
                dip = int(displacement)
                print("there is a displacement in the memory address of ",dip)
                if (dip <=8):
                    mcode = mcode + ' 01'
                else:
                    mcode = mcode + ' 10'
                rm = mem_reg
            else:
                mcode = mcode + ' 00'
                rm=op1[1:-1]
            if (rm in reg8) or (rm in reg16) or (rm in reg32):
                memboi = regcode(rm)
            else:
                rm = rm[:-1]
                memboi = bin(int(rm))
                memboi = str(memboi)
                memboi = memboi[2:]
            print("source is memory location: ", rm)
            print(f"Add {op1} and contents of {op2} and store result in {op1}") 
            if '+' in op1:
                print("there is a displacement in the memory address")
            printmemreg(mcode,reg1,memboi)
        #valid constant checks for constant
        elif (op2[-1] == 'h') or (op2[-1] == 'd') or (op2[-1] == 'b'):
            constyadd(op1,op2)
    else:
        print("invalid")
    return mcode

def sub(op1,op2):
    global mcode
    mcode = opcode + '000100'
    global memboi
    global reggieboi
    #if destination memory location
    if (op1[0] == '[' and op1[-1] == ']'):
        mcode = mcode + '0'
        if '+' in op1:
            mem_location=op1[1:-1]
            disp =mem_location.split("+")
            mem_reg = disp[0]
            displacement = disp[1]
            dip = int(displacement)
            print("there is a displacement in the memory address of ",dip)
            if (dip <= 8):
                mod = ' 01'
            else:
                mod = ' 10'
            rm = mem_reg
        else:
            mod = ' 00'
            rm=op1[1:-1]
        if (rm in reg8) or (rm in reg16) or (rm in reg32):
            memboi = regcode(rm)
        else:
            rm = rm[:-1]
            memboi = bin(int(rm))
            memboi = str(memboi)
            memboi = memboi[2:]
        print("destination is memory location: " , rm)
        if (op2[0] == '[' and op2[-1] == ']'): #error case <mem>,<mem> not possible
            print("Both operands can not be memory locations")
            memboi = regcode(rm)
        elif (op2 in reg8) or (op2 in reg16) or (op2 in reg32): #source register
            print("source is register: ", op2)
            print(f"Subtract contents of memory {rm} from {op2} and store result in {op1}")
            reg = regcode(op2)
            if op2 in reg8: 
                mcode = mcode + '0'
            else:
                mcode = mcode + '1'
            mcode = mcode + mod
            prinmcode(mcode,memboi,reg)
        elif (op2[-1] == 'h') or (op2[-1] == 'd') or (op2[-1] == 'b'): #operand 2 is constant
            constymemsub(op1,op2)
        else:
            print("invalid")
        

    #if destination is register
    elif (op1 in reg16) or (op1 in reg32) or (op1 in reg8):
        global reggieboi2
        #r/m to reg -> 1
        mcode = mcode + '1'
        print("destination is register: ", op1)
        reg1 = regcode(op1)
        if op1 in reg8: 
            mcode = mcode + '0'
        else:
            mcode = mcode + '1'

        if (op2 in reg8) or (op2 in reg16) or (op2 in reg32): #source is register
            #r/m is reg -> 11
            mcode = mcode + ' 11'
            reg2 = regcode(op2) 
            if ((op1 in reg8) and (op2 in reg8)): #both 8 bit
                print("source is register: ", op2)
                print(f"Subtract {op2} of size 8 bits from {op1} of size 8 bits and store result in {op1}") 
            elif ((op1 in reg16) and (op2 in reg16)): #both 16 bit
                print("source is register: ", op2)
                print(f"Subtract {op2} of size 16 bits from {op1} of size 16 bits and store result in {op1}")
            elif ((op1 in reg32) and (op2 in reg32)): #both 32 bit
                print("source is register: ", op2) 
                print(f"Subtract {op2} of size 32 bits from {op1} of size 32 bits and store result in {op1}")
            else: 
                print(f"register sizes dont match. cant Subtract {op1} and {op2}")
            printregreg(mcode,reg1,reg2)

        elif (op2[0] == '[' and op2[-1] == ']'): #source is memory location
            #r/m is mem and check for disp
            if '+' in op2:
                mem_location=op2[1:-1]
                disp =mem_location.split("+")
                mem_reg = disp[0]
                displacement = disp[1]
                dip = int(displacement)
                print("there is a displacement in the memory address of ",dip)
                if (dip <=8):
                    mcode = mcode + ' 01'
                else:
                    mcode = mcode + ' 10'
                rm = mem_reg
            else:
                mcode = mcode + ' 00'
                rm=op1[1:-1]
            if (rm in reg8) or (rm in reg16) or (rm in reg32):
                memboi = regcode(rm)
            else:
                rm = rm[:-1]
                memboi = bin(int(rm))
                memboi = str(memboi)
                memboi = memboi[2:]
            print("source is memory location: ", rm)
            print(f"Subtract contents of location {rm} from {op1} and store result in {op1}") 
            if '+' in op1:
                print("there is a displacement in the memory address")
            printmemreg(mcode,reg1,memboi)
        #valid constant checks for constant
        elif (op2[-1] == 'h') or (op2[-1] == 'd') or (op2[-1] == 'b'):
            constysub(op1,op2)
        else:
            print("invalid")
    else :
        print("invalid")
    return mcode



def inc(op1):
    global mcode
    mcode = mcode + '101000'
    if (op1[0] == '[' and op1[-1] == ']'):
        mcode = mcode + '1'  #for mem
        if '+' in op1:
                print("there is a displacement in the memory address")
                mcode = mcode + ' 0 10'
                rm = op1[1:-3]
        else:
            mcode = mcode + ' 0 00'
            rm=op1[1:-1]
        print(f"Add 1 to the value stored at location {rm}")
        print("machine code for this instruction is")
        print(f"{mcode} {regcode(rm)}")
    elif (op1 in reg16) or (op1 in reg32) or (op1 in reg8):
        
        mcode = mcode +'0' #disp
        if op1 in reg8: #word
            mcode = mcode + ' 0'
        else:
            mcode = mcode + ' 1'
        mcode = mcode + ' 11' #for mod

        print(f"Add 1 to the contents of {op1}")
        x = (regcode(op1))
        print("machine code for this instruction is")
        print(f"{mcode} {x}")
    else:
        print("invalid")
    return mcode

def dec(op1):
    global mcode
    mcode = opcode + '110000'
    if (op1[0] == '[' and op1[-1] == ']'):
        mcode = mcode + '1' #for mem
        if '+' in op1:
                print("there is a displacement in the memory address")
                mcode = mcode + '0 01'
                rm = op1[1:-3]
        else:
            mcode = mcode + '0 00'
            rm=op1[1:-1]
        print(f"Subtract 1 from the value stored at location {rm}")
        print("machine code for this instruction is\n", mcode ,'', regcode(rm))
    elif (op1 in reg16) or (op1 in reg32) or (op1 in reg8):
        mcode = mcode +'0' #disp
        if op1 in reg8: #word
            mcode = mcode + '0'
        else:
            mcode = mcode + '1'
        mcode = mcode + '11' #for mod
        print(f"subtract 1 from the contents of {op1}")
        print("machine code for this instruction is\n", mcode,'', regcode(op1))
    else:
        print("invalid")
    return mcode


if instr in instructions:
    if instr == 'add':
        z = y.split(",")
        op1 = z[0]
        op2 = z[1]
        op1 = str(op1)
        op2 = str(op2)
        add(op1,op2)
    elif instr == 'sub' :
        z = y.split(",")
        op1 = z[0]
        op2 = z[1]
        op1 = str(op1)
        op2 = str(op2)
        sub(op1,op2)
    elif instr == 'inc' :
        inc(op1)
    elif instr == 'dec' :
        dec(op1)
else:
    print("this instruction is not in our instruction set")
